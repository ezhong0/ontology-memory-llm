"""add domain schema for demo

Revision ID: 7b1104998645
Revises: b7d360b4abf0
Create Date: 2025-10-15 14:52:48.239564

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7b1104998645'
down_revision: Union[str, None] = 'b7d360b4abf0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customers',
    sa.Column('customer_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('industry', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('customer_id'),
    schema='domain'
    )
    op.create_table('sales_orders',
    sa.Column('so_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('so_number', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['domain.customers.customer_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('so_id'),
    sa.UniqueConstraint('so_number'),
    schema='domain'
    )
    op.create_table('tasks',
    sa.Column('task_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('body', sa.Text(), nullable=True),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['domain.customers.customer_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('task_id'),
    schema='domain'
    )
    op.create_table('invoices',
    sa.Column('invoice_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('so_id', sa.UUID(), nullable=False),
    sa.Column('invoice_number', sa.Text(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=False),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('issued_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['so_id'], ['domain.sales_orders.so_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('invoice_id'),
    sa.UniqueConstraint('invoice_number'),
    schema='domain'
    )
    op.create_table('work_orders',
    sa.Column('wo_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('so_id', sa.UUID(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('technician', sa.Text(), nullable=True),
    sa.Column('scheduled_for', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['so_id'], ['domain.sales_orders.so_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('wo_id'),
    schema='domain'
    )
    op.create_table('payments',
    sa.Column('payment_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('method', sa.Text(), nullable=True),
    sa.Column('paid_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['invoice_id'], ['domain.invoices.invoice_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('payment_id'),
    schema='domain'
    )
    op.drop_constraint(op.f('entity_aliases_canonical_entity_id_fkey'), 'entity_aliases', type_='foreignkey')
    op.create_foreign_key(None, 'entity_aliases', 'canonical_entities', ['canonical_entity_id'], ['entity_id'], source_schema='app', referent_schema='app')
    op.drop_constraint(op.f('memory_conflicts_detected_at_event_id_fkey'), 'memory_conflicts', type_='foreignkey')
    op.create_foreign_key(None, 'memory_conflicts', 'chat_events', ['detected_at_event_id'], ['event_id'], source_schema='app', referent_schema='app')
    op.drop_constraint(op.f('memory_summaries_supersedes_summary_id_fkey'), 'memory_summaries', type_='foreignkey')
    op.create_foreign_key(None, 'memory_summaries', 'memory_summaries', ['supersedes_summary_id'], ['summary_id'], source_schema='app', referent_schema='app')
    op.drop_constraint(op.f('semantic_memories_extracted_from_event_id_fkey'), 'semantic_memories', type_='foreignkey')
    op.drop_constraint(op.f('semantic_memories_subject_entity_id_fkey'), 'semantic_memories', type_='foreignkey')
    op.drop_constraint(op.f('semantic_memories_superseded_by_memory_id_fkey'), 'semantic_memories', type_='foreignkey')
    op.create_foreign_key(None, 'semantic_memories', 'canonical_entities', ['subject_entity_id'], ['entity_id'], source_schema='app', referent_schema='app')
    op.create_foreign_key(None, 'semantic_memories', 'semantic_memories', ['superseded_by_memory_id'], ['memory_id'], source_schema='app', referent_schema='app')
    op.create_foreign_key(None, 'semantic_memories', 'chat_events', ['extracted_from_event_id'], ['event_id'], source_schema='app', referent_schema='app')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'semantic_memories', schema='app', type_='foreignkey')
    op.drop_constraint(None, 'semantic_memories', schema='app', type_='foreignkey')
    op.drop_constraint(None, 'semantic_memories', schema='app', type_='foreignkey')
    op.create_foreign_key(op.f('semantic_memories_superseded_by_memory_id_fkey'), 'semantic_memories', 'semantic_memories', ['superseded_by_memory_id'], ['memory_id'])
    op.create_foreign_key(op.f('semantic_memories_subject_entity_id_fkey'), 'semantic_memories', 'canonical_entities', ['subject_entity_id'], ['entity_id'])
    op.create_foreign_key(op.f('semantic_memories_extracted_from_event_id_fkey'), 'semantic_memories', 'chat_events', ['extracted_from_event_id'], ['event_id'])
    op.drop_constraint(None, 'memory_summaries', schema='app', type_='foreignkey')
    op.create_foreign_key(op.f('memory_summaries_supersedes_summary_id_fkey'), 'memory_summaries', 'memory_summaries', ['supersedes_summary_id'], ['summary_id'])
    op.drop_constraint(None, 'memory_conflicts', schema='app', type_='foreignkey')
    op.create_foreign_key(op.f('memory_conflicts_detected_at_event_id_fkey'), 'memory_conflicts', 'chat_events', ['detected_at_event_id'], ['event_id'])
    op.drop_constraint(None, 'entity_aliases', schema='app', type_='foreignkey')
    op.create_foreign_key(op.f('entity_aliases_canonical_entity_id_fkey'), 'entity_aliases', 'canonical_entities', ['canonical_entity_id'], ['entity_id'])
    op.drop_table('payments', schema='domain')
    op.drop_table('work_orders', schema='domain')
    op.drop_table('invoices', schema='domain')
    op.drop_table('tasks', schema='domain')
    op.drop_table('sales_orders', schema='domain')
    op.drop_table('customers', schema='domain')
    # ### end Alembic commands ###

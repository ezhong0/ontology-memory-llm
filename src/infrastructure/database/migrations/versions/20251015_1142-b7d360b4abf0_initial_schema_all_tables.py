"""initial_schema_all_tables

Revision ID: b7d360b4abf0
Revises: 
Create Date: 2025-10-15 11:42:12.468805

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision: str = 'b7d360b4abf0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('canonical_entities',
    sa.Column('entity_id', sa.Text(), nullable=False),
    sa.Column('entity_type', sa.Text(), nullable=False),
    sa.Column('canonical_name', sa.Text(), nullable=False),
    sa.Column('external_ref', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('entity_id'),
    schema='app'
    )
    op.create_index('idx_entities_name', 'canonical_entities', ['canonical_name'], unique=False, schema='app')
    op.create_index('idx_entities_type', 'canonical_entities', ['entity_type'], unique=False, schema='app')
    op.create_table('chat_events',
    sa.Column('event_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Text(), nullable=False),
    sa.Column('role', sa.Text(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_hash', sa.Text(), nullable=False),
    sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('event_id'),
    sa.UniqueConstraint('session_id', 'content_hash', name='uq_session_content'),
    schema='app'
    )
    op.create_index('idx_chat_events_session', 'chat_events', ['session_id'], unique=False, schema='app')
    op.create_index('idx_chat_events_user_time', 'chat_events', ['user_id', 'created_at'], unique=False, schema='app')
    op.create_table('domain_ontology',
    sa.Column('relation_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('from_entity_type', sa.Text(), nullable=False),
    sa.Column('relation_type', sa.Text(), nullable=False),
    sa.Column('to_entity_type', sa.Text(), nullable=False),
    sa.Column('cardinality', sa.Text(), nullable=False),
    sa.Column('relation_semantics', sa.Text(), nullable=False),
    sa.Column('join_spec', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('constraints', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('relation_id'),
    sa.UniqueConstraint('from_entity_type', 'relation_type', 'to_entity_type', name='uq_ontology_relation'),
    schema='app'
    )
    op.create_index('idx_ontology_from', 'domain_ontology', ['from_entity_type'], unique=False, schema='app')
    op.create_index('idx_ontology_to', 'domain_ontology', ['to_entity_type'], unique=False, schema='app')
    op.create_table('episodic_memories',
    sa.Column('memory_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Text(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('summary', sa.Text(), nullable=False),
    sa.Column('event_type', sa.Text(), nullable=False),
    sa.Column('source_event_ids', postgresql.ARRAY(sa.BigInteger()), nullable=False),
    sa.Column('entities', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('domain_facts_referenced', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('importance', sa.Float(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('memory_id'),
    schema='app'
    )
    op.create_index('idx_episodic_embedding', 'episodic_memories', ['embedding'], unique=False, schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.create_index('idx_episodic_session', 'episodic_memories', ['session_id'], unique=False, schema='app')
    op.create_index('idx_episodic_user_time', 'episodic_memories', ['user_id', 'created_at'], unique=False, schema='app')
    op.create_table('memory_summaries',
    sa.Column('summary_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Text(), nullable=False),
    sa.Column('scope_type', sa.Text(), nullable=False),
    sa.Column('scope_identifier', sa.Text(), nullable=True),
    sa.Column('summary_text', sa.Text(), nullable=False),
    sa.Column('key_facts', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('source_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('supersedes_summary_id', sa.BigInteger(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['supersedes_summary_id'], ['app.memory_summaries.summary_id'], ),
    sa.PrimaryKeyConstraint('summary_id'),
    schema='app'
    )
    op.create_index('idx_summaries_embedding', 'memory_summaries', ['embedding'], unique=False, schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.create_index('idx_summaries_user_scope', 'memory_summaries', ['user_id', 'scope_type', 'scope_identifier'], unique=False, schema='app')
    op.create_table('procedural_memories',
    sa.Column('memory_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Text(), nullable=False),
    sa.Column('trigger_pattern', sa.Text(), nullable=False),
    sa.Column('trigger_features', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('action_heuristic', sa.Text(), nullable=False),
    sa.Column('action_structure', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('observed_count', sa.Integer(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('memory_id'),
    schema='app'
    )
    op.create_index('idx_procedural_confidence', 'procedural_memories', ['confidence'], unique=False, schema='app')
    op.create_index('idx_procedural_embedding', 'procedural_memories', ['embedding'], unique=False, schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.create_index('idx_procedural_user', 'procedural_memories', ['user_id'], unique=False, schema='app')
    op.create_table('system_config',
    sa.Column('config_key', sa.Text(), nullable=False),
    sa.Column('config_value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('config_key'),
    schema='app'
    )
    op.create_table('entity_aliases',
    sa.Column('alias_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('canonical_entity_id', sa.Text(), nullable=False),
    sa.Column('alias_text', sa.Text(), nullable=False),
    sa.Column('alias_source', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Text(), nullable=True),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('use_count', sa.Integer(), nullable=False),
    sa.Column('alias_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['canonical_entity_id'], ['app.canonical_entities.entity_id'], ),
    sa.PrimaryKeyConstraint('alias_id'),
    sa.UniqueConstraint('alias_text', 'user_id', 'canonical_entity_id', name='uq_alias_user_entity'),
    schema='app'
    )
    op.create_index('idx_aliases_entity', 'entity_aliases', ['canonical_entity_id'], unique=False, schema='app')
    op.create_index('idx_aliases_text', 'entity_aliases', ['alias_text'], unique=False, schema='app')
    op.create_index('idx_aliases_user', 'entity_aliases', ['user_id'], unique=False, schema='app', postgresql_where=sa.text('user_id IS NOT NULL'))
    op.create_table('memory_conflicts',
    sa.Column('conflict_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('detected_at_event_id', sa.BigInteger(), nullable=False),
    sa.Column('conflict_type', sa.Text(), nullable=False),
    sa.Column('conflict_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('resolution_strategy', sa.Text(), nullable=True),
    sa.Column('resolution_outcome', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['detected_at_event_id'], ['app.chat_events.event_id'], ),
    sa.PrimaryKeyConstraint('conflict_id'),
    schema='app'
    )
    op.create_index('idx_conflicts_event', 'memory_conflicts', ['detected_at_event_id'], unique=False, schema='app')
    op.create_index('idx_conflicts_type', 'memory_conflicts', ['conflict_type'], unique=False, schema='app')
    op.create_table('semantic_memories',
    sa.Column('memory_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Text(), nullable=False),
    sa.Column('subject_entity_id', sa.Text(), nullable=True),
    sa.Column('predicate', sa.Text(), nullable=False),
    sa.Column('predicate_type', sa.Text(), nullable=False),
    sa.Column('object_value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('confidence_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('reinforcement_count', sa.Integer(), nullable=False),
    sa.Column('last_validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('source_type', sa.Text(), nullable=False),
    sa.Column('source_memory_id', sa.BigInteger(), nullable=True),
    sa.Column('extracted_from_event_id', sa.BigInteger(), nullable=True),
    sa.Column('status', sa.Text(), nullable=False),
    sa.Column('superseded_by_memory_id', sa.BigInteger(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('importance', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("status IN ('active', 'aging', 'superseded', 'invalidated')", name='valid_status'),
    sa.CheckConstraint('confidence >= 0 AND confidence <= 1', name='valid_confidence'),
    sa.ForeignKeyConstraint(['extracted_from_event_id'], ['app.chat_events.event_id'], ),
    sa.ForeignKeyConstraint(['subject_entity_id'], ['app.canonical_entities.entity_id'], ),
    sa.ForeignKeyConstraint(['superseded_by_memory_id'], ['app.semantic_memories.memory_id'], ),
    sa.PrimaryKeyConstraint('memory_id'),
    schema='app'
    )
    op.create_index('idx_semantic_embedding', 'semantic_memories', ['embedding'], unique=False, schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.create_index('idx_semantic_entity_pred', 'semantic_memories', ['subject_entity_id', 'predicate'], unique=False, schema='app')
    op.create_index('idx_semantic_user_status', 'semantic_memories', ['user_id', 'status'], unique=False, schema='app')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_semantic_user_status', table_name='semantic_memories', schema='app')
    op.drop_index('idx_semantic_entity_pred', table_name='semantic_memories', schema='app')
    op.drop_index('idx_semantic_embedding', table_name='semantic_memories', schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.drop_table('semantic_memories', schema='app')
    op.drop_index('idx_conflicts_type', table_name='memory_conflicts', schema='app')
    op.drop_index('idx_conflicts_event', table_name='memory_conflicts', schema='app')
    op.drop_table('memory_conflicts', schema='app')
    op.drop_index('idx_aliases_user', table_name='entity_aliases', schema='app', postgresql_where=sa.text('user_id IS NOT NULL'))
    op.drop_index('idx_aliases_text', table_name='entity_aliases', schema='app')
    op.drop_index('idx_aliases_entity', table_name='entity_aliases', schema='app')
    op.drop_table('entity_aliases', schema='app')
    op.drop_table('system_config', schema='app')
    op.drop_index('idx_procedural_user', table_name='procedural_memories', schema='app')
    op.drop_index('idx_procedural_embedding', table_name='procedural_memories', schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.drop_index('idx_procedural_confidence', table_name='procedural_memories', schema='app')
    op.drop_table('procedural_memories', schema='app')
    op.drop_index('idx_summaries_user_scope', table_name='memory_summaries', schema='app')
    op.drop_index('idx_summaries_embedding', table_name='memory_summaries', schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.drop_table('memory_summaries', schema='app')
    op.drop_index('idx_episodic_user_time', table_name='episodic_memories', schema='app')
    op.drop_index('idx_episodic_session', table_name='episodic_memories', schema='app')
    op.drop_index('idx_episodic_embedding', table_name='episodic_memories', schema='app', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.drop_table('episodic_memories', schema='app')
    op.drop_index('idx_ontology_to', table_name='domain_ontology', schema='app')
    op.drop_index('idx_ontology_from', table_name='domain_ontology', schema='app')
    op.drop_table('domain_ontology', schema='app')
    op.drop_index('idx_chat_events_user_time', table_name='chat_events', schema='app')
    op.drop_index('idx_chat_events_session', table_name='chat_events', schema='app')
    op.drop_table('chat_events', schema='app')
    op.drop_index('idx_entities_type', table_name='canonical_entities', schema='app')
    op.drop_index('idx_entities_name', table_name='canonical_entities', schema='app')
    op.drop_table('canonical_entities', schema='app')
    # ### end Alembic commands ###

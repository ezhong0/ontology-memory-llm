[pytest]
# Pytest Configuration for Ontology-Aware Memory System

# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum Python version
minversion = 3.11

# Test paths
testpaths = tests

# Console output options
console_output_style = progress
addopts =
    # Show extra test summary info
    -ra
    # Show local variables in tracebacks
    --showlocals
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Strict config (fail on unknown config)
    --strict-config
    # Enable verbose output for failed tests
    --tb=short
    # Show durations of slowest 10 tests
    --durations=10
    # Fail on first error (optional, comment out for full test run)
    # -x
    # Stop after N failures (optional)
    # --maxfail=5

# Markers (defined in conftest.py, repeated here for clarity)
markers =
    unit: Unit tests (fast, no I/O)
    integration: Integration tests (DB, external services)
    e2e: End-to-end tests (full API scenarios)
    slow: Slow tests (may use real LLM API)
    benchmark: Performance benchmark tests
    philosophy: Vision principle validation tests
    property: Property-based tests (hypothesis)

# Asyncio configuration
asyncio_mode = auto

# Coverage configuration (when running with --cov)
# See .coveragerc for detailed coverage config

# Warnings
filterwarnings =
    # Treat warnings as errors (strict mode)
    error
    # Ignore specific warnings from dependencies
    ignore::DeprecationWarning:pytest_asyncio.*
    ignore::DeprecationWarning:sqlalchemy.*
    ignore::sqlalchemy.exc.SADeprecationWarning
    ignore::sqlalchemy.exc.MovedIn20Warning
    ignore::UserWarning:hypothesis.*
    ignore::pydantic.warnings.PydanticDeprecatedSince20

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Timeout (optional - requires pytest-timeout)
# timeout = 300  # 5 minutes per test
# timeout_method = thread

# Hypothesis configuration
# To use a specific profile, pass --hypothesis-profile=<profile> on command line
# Available profiles: default, ci, dev

[hypothesis:default]
max_examples = 100
deadline = 5000  # 5 seconds per example

[hypothesis:ci]
# More thorough testing in CI
max_examples = 1000
deadline = 10000  # 10 seconds

[hypothesis:dev]
# Faster testing during development
max_examples = 20
deadline = 2000  # 2 seconds

# pytest-benchmark configuration
[benchmark]
min_rounds = 5
max_time = 1.0
min_time = 0.1
